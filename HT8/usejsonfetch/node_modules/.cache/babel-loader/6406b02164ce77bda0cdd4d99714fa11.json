{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\boris\\\\Desktop\\\\madan\\\\React\\\\HT8\\\\usejsonfetch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from 'react';\nexport default function useJsonFetch(url, opts) {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        loading = _useState4[0],\n        setLoading = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        error = _useState6[0],\n        setError = _useState6[1];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n\n      try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(response.statusText);\n        const data = await response.json();\n        setData(data);\n        setError(null);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n  return [data, loading, error];\n}","map":{"version":3,"sources":["C:\\Users\\boris\\Desktop\\madan\\React\\HT8\\usejsonfetch\\src\\Hook\\useJsonFetch.jsx"],"names":["useState","useEffect","useJsonFetch","url","opts","data","setData","loading","setLoading","error","setError","fetchData","response","fetch","ok","Error","statusText","json","e"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,IAA3B,EAAiC;AAAA,oBACpBJ,QAAQ,CAAC,IAAD,CADY;AAAA;AAAA,QACrCK,IADqC;AAAA,QAC/BC,OAD+B;;AAAA,qBAEdN,QAAQ,CAAC,KAAD,CAFM;AAAA;AAAA,QAErCO,OAFqC;AAAA,QAE5BC,UAF4B;;AAAA,qBAGlBR,QAAQ,CAAC,IAAD,CAHU;AAAA;AAAA,QAGrCS,KAHqC;AAAA,QAG9BC,QAH8B;;AAK5CT,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,SAAS,GAAG,YAAY;AAC1BH,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACA,cAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAD,CAA5B;AACA,YAAI,CAACS,QAAQ,CAACE,EAAd,EAAkB,MAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AAClB,cAAMX,IAAI,GAAG,MAAMO,QAAQ,CAACK,IAAT,EAAnB;AACAX,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAND,CAME,OAAOQ,CAAP,EAAU;AACRR,QAAAA,QAAQ,CAACQ,CAAD,CAAR;AACH,OARD,SAQU;AACNV,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,KAbD;;AAcAG,IAAAA,SAAS;AACZ,GAhBQ,EAgBN,CAACR,GAAD,CAhBM,CAAT;AAiBA,SAAO,CAACE,IAAD,EAAOE,OAAP,EAAgBE,KAAhB,CAAP;AACH","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport default function useJsonFetch(url, opts) {\r\n    const [data, setData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const response = await fetch(url);\r\n                if (!response.ok) throw new Error(response.statusText);\r\n                const data = await response.json();\r\n                setData(data);\r\n                setError(null);\r\n            } catch (e) {\r\n                setError(e);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [url]);\r\n    return [data, loading, error];\r\n}"]},"metadata":{},"sourceType":"module"}